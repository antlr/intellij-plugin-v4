<idea-plugin version="2">
  <id>org.antlr.intellij.plugin</id>
  <name>ANTLR v4 grammar plugin</name>
  <version>1.5</version>
  <vendor email="parrt@antlr.org" url="https://github.com/antlr/intellij-plugin-v4">ANTLR Project</vendor>

  <description><![CDATA[
  <p>
      This plugin is for ANTLR v4 grammars. Features: syntax highlighting,
      syntax error checking, semantic error checking, navigation window,
      live preview, parse tree view, profiler, goto-declaration, find usages,
      rename tokens, rename rules.
      Generates code in <project-root>/gen/package/YourGrammarRecognizer.java
      unless you override in the configuration dialog.
      Shortcut to generate parsers is ctrl-shift-G / meta-shift-G but it's in Tools menu, popups.
      Code completion for tokens, rule names. finds tokenVocab option for code gen
          if there is a tokenVocab option, don't warn about implicit tokens.
          shortcut conflicted with grammar-kit plugin. Has live grammar interpreter
          for grammar preview. Right click on rule and say "Test ANTLR Rule".
          Changes to grammar seen in parse tree upon save of grammar. Works with
          Intellij 13.x and requires 12.1.x.
  <p>
          You can configure the ANTLR tool options per grammar file; right-click
          in a grammar or on a grammar element within the structured view.
          When you change and save a grammar, it automatically builds with ANTLR
          in the background according to the preferences you have set.  ANTLR
          tool errors appear in a console you can opened by clicking on a button
          in the bottom tab.
  <p>
          You can use the meta-key while moving the mouse and it will show you
          token information in the preview editor box via tooltips.

  <p>
          Errors within the preview editor are now highlighted with tooltips
          and underlining just like a regular editor window. The difference
          is that this window's grammar is specified in your grammar file.

  <p>
meta-j pops up a list of live templates, just like it does for Java programming.
Currently, there are a number of lexical rules for common tokens such as comments
and identifiers that you can automatically inject.
There are shortcuts like rid that lets you jump directly to the
lexical rule you would like to generate. If you type the shortcut and wait a
second, intellij should pop up an action you can select for that shortcut.

  <p>
ctrl-return, or whatever you have configured for the generate pop-up,
will bring up a list of things you can generate. The only one so far is
a generator to create lexical rules for any literals, referenced in the parser
grammar, that have not been defined.

  <p>
You can type input into an editor or select a file for testing in preview window.

  <p>
Meta-key while moving the mouse shows token info per above, but now you can
click on the token that's underlined and it will show the location in the ANTLR
grammar editor window of the grammar element that matched that token.
This required a change to ANTLR 4 itself and therefore includes a
prerelease version of ANTLR 4.2.3.

  <p>
Alt-key while moving the mouse shows the region of input associated with
parser rule that matched it. It finds parent of the token under cursor
and shows region of that rule parse tree node.  Clicking at the same time
jumps the grammar to the associated rule.  A pop up shows the parser call
stack leading to that parse region.

<p>
Added profiler tab in preview tool window. Selecting a row in the table
 highlights the associated decision in the grammar and highlights important
 regions of the input window to the left. You can sort the columns by clicking
on the header row. Hover over the header row to get tooltips describing the column.
If you know a lot about the internals of the parsing strategy, you can click on
the expert columns to see additional information. This is  the first attempt
 at a profiler so we can learn what is really important and then improve.
 If you see ambiguities highlighted, those you should definitely take a look
 at in your grammar. If you see decisions requiring full context sensitivity,
 when viewing the expert columns, those are very expensive and could be causing
 speed problems. Note that the profiler always tries to keep up-to-date with
 the input. The profiler uses the parser interpreter but is fairly
 consistent with the speed of a generated and compiled parser but it does use
 single-stage full LL parsing which can be slower.  It needs to do that so
 that it gets full and complete profiling information. For those in the know,
 it uses PredictionMode.LL_EXACT_AMBIG_DETECTION.

<p>
For really big files and
 slow grammars, there is an appreciable delay when displaying the parse tree or profiling information.

<p>
<a href="https://github.com/antlr/intellij-plugin-v4">Github source</a>
      ]]></description>

  <change-notes><![CDATA[
	Add profiler.
      ]]>
  </change-notes>

  <!-- please see http://confluence.jetbrains.net/display/IDEADEV/Build+Number+Ranges for description -->
  <idea-version since-build="123.72"/>

  <!-- please see http://confluence.jetbrains.net/display/IDEADEV/Plugin+Compatibility+with+IntelliJ+Platform+Products
       on how to target different products -->
  <!-- uncomment to enable plugin in all products
  <depends>com.intellij.modules.lang</depends>
  -->

  <application-components>
  </application-components>

  <project-components>
    <component>
        <implementation-class>org.antlr.intellij.plugin.ANTLRv4PluginController</implementation-class>
    </component>
  </project-components>

  <actions>
	<action id="antlr.Generate" class="org.antlr.intellij.plugin.actions.GenerateParserAction"
		text="Generate ANTLR Recognizer">
		<keyboard-shortcut keymap="$default" first-keystroke="control shift G"/>
		<add-to-group group-id="ToolsMenu" anchor="before" relative-to-action="com.intellij.tools.ExternalToolsGroup"/>
		<add-to-group group-id="EditorPopupMenu" anchor="last"/>
		<add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
	</action>
	<action id="antlr.Configure" class="org.antlr.intellij.plugin.actions.ConfigureANTLRAction"
		text="Configure ANTLR...">
		<add-to-group group-id="ToolsMenu" anchor="before" relative-to-action="com.intellij.tools.ExternalToolsGroup"/>
		<add-to-group group-id="EditorPopupMenu" anchor="last"/>
		<add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
	</action>
	  <action id="antlr.TestRule" class="org.antlr.intellij.plugin.actions.TestRuleAction"
			  text="Test ANTLR Rule">
		  <add-to-group group-id="StructureViewPopupMenu" anchor="first"/>
		  <add-to-group group-id="EditorPopupMenu" anchor="last"/>
	  </action>
	  <action id="antlr.DefineLexerRulesForLiterals"
			  class="org.antlr.intellij.plugin.actions.GenerateLexerRulesForLiteralsAction"
			  text="Generate lexer rules for literals"
			  description="Inject lexer rules for undefined literals but leave literal in place">
		  <add-to-group group-id="GenerateGroup" anchor="first"/>
	  </action>
  </actions>

  <extensions defaultExtensionNs="com.intellij">
	  <!--<codeInsight.lineMarkerProvider language="ANTLRv4" implementationClass="org.antlr.intellij.plugin.ANTLRv4LineMarkerProvider"/>-->
      <fileTypeFactory implementation="org.antlr.intellij.plugin.ANTLRv4FileTypeFactory"/>
      <lang.syntaxHighlighterFactory key="ANTLRv4" implementationClass="org.antlr.intellij.plugin.ANTLRv4SyntaxHighlighterFactory"/>
      <colorSettingsPage implementation="org.antlr.intellij.plugin.configdialogs.ANTLRv4ColorsPage"/>
      <lang.parserDefinition language="ANTLRv4" implementationClass="org.antlr.intellij.plugin.ANTLRv4ParserDefinition"/>
      <lang.ast.factory language="ANTLRv4" implementationClass="org.antlr.intellij.plugin.ANTLRv4ASTFactory"/>
      <lang.psiStructureViewFactory language="ANTLRv4"
                implementationClass="org.antlr.intellij.plugin.structview.ANTLRv4StructureViewFactory"/>

      <externalAnnotator language="ANTLRv4" implementationClass="org.antlr.intellij.plugin.ANTLRv4ExternalAnnotator"/>
      <lang.findUsagesProvider language="ANTLRv4"
                implementationClass="org.antlr.intellij.plugin.ANTLRv4FindUsagesProvider"/>

	  <defaultLiveTemplatesProvider implementation="org.antlr.intellij.plugin.templates.ANTLRLiveTemplatesProvider"/>
	  <liveTemplateContext implementation="org.antlr.intellij.plugin.templates.ANTLRGenericContext"/>
	  <liveTemplateContext implementation="org.antlr.intellij.plugin.templates.OutsideRuleContext"/>
  </extensions>
</idea-plugin>
